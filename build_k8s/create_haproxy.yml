---
- name: Create a load blance using HAproxy
  hosts: lb_and_ha
  vars:
    # 负载均衡对外提供服务的端口
    service_bind_port: "{{ k8s.control_plane_port }}"
    # 后端服务器使用的端口, 是给下面转换的过滤器使用的, haproxy.cfg.j2 模板没有使用该变量
    backend_server_port: "{{ k8s.apiserver_bind_port }}"
    # 转换成形如: ['192.168.3.151:6443', '192.168.3.152:6443', '192.168.3.153:6443'] 的列表
    backend_servers: "{{ ansible_play_hosts_all | map('regex_replace', '^(.*)$',  '\\1:' + backend_server_port) | list }}"
    # 或者采用如下的方式, 手动设置, 这样 backend_servers 可以由集群外的主机来担任
    # backend_servers:
    #   # - "<ip>:<port>"
    #   - "192.168.3.151:6443"
    #   - "192.168.3.152:6443"
    #   - "192.168.3.153:6443"
    ha_stats_enable: True
    ha_stats_port: 1936
    ha_stats_url: /haproxy_stats
    ha_stats_user: admin
    ha_stats_pwd: showmethemoney
    
  tasks:
    - name: check parameters
      fail:
        msg: "Please setup backend_servers parameter"
      when: backend_servers == None or (backend_servers|count) == 0 or backend_servers[0] == '' or  backend_servers[0] == '<ip>:<port>'

      # 进行主机的基础设置
    - import_role:
        name: basic_setup

    - name: install haproxy
      apt:
        update_cache: no
        pkg:
          - haproxy
        state: present

    # - name: add docker-ce GPG key
    #   apt_key:
    #     url: "{{ apt.docker.apt_key_url }}"
    #     state: present

    # - name: add docker-ce APT repository
    #   apt_repository:
    #     repo: "deb [arch=amd64] {{ apt.docker.apt_repository }} {{ ansible_lsb.codename }} stable"

    # - name: check if docker installed
    #   stat:
    #     path: /usr/bin/docker
    #   register: check_docker

    # - name: update apt cache if docker does not installed
    #   apt:
    #     update_cache: yes
    #   when: check_docker.stat.exists == False

    # - name: install docker-ce pkg
    #   apt:
    #     pkg:
    #       - docker-ce
    #       - docker-ce-cli
    #       - containerd.io

    # - name: setup /etc/docker/daemon.json
    #   json_patch:
    #     src: "/etc/docker/daemon.json"
    #     create: yes
    #     create_type: object
    #     pretty: yes
    #     operations:
    #       - op: add
    #         path: "/registry-mirrors"
    #         value: ["https://dockerhub.azk8s.cn"]
    #       - op: add
    #         path: "/exec-opts"
    #         value: ["native.cgroupdriver=systemd"]
    #   notify: restart docker service

    # - name: Check if docker-compose exists
    #   stat:
    #     path: /usr/local/bin/docker-compose
    #   register: docker_compose

    # - name: Install docker-compose
    #   shell:
    #     cmd: 'curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose'
    #     warn: false
    #   when: docker_compose.stat.exists == False
    
    - name: setup HAproxy configuration
      template:
        backup: True
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
        mode: u=rw,g=r,o=r
      notify: restart HAproxy service

  handlers:
  #   - name: restart docker service
  #     service:
  #       name: docker
  #       state: restarted
    - name: restart HAproxy service
      service:
        name: haproxy
        state: restarted